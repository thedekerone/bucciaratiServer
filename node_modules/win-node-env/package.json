{
  "_from": "win-node-env",
  "_id": "win-node-env@0.4.0",
  "_inBundle": false,
  "_integrity": "sha512-bf4TV/NOBEazlHJW/bOns7u2JaHe3f5bz8BYanm/xuqJ405NG9OK3VAI1Y2WvHJsAo4GMU8EYTHSh59Q3UfHvA==",
  "_location": "/win-node-env",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "win-node-env",
    "fetchSpec": "latest",
    "name": "win-node-env",
    "raw": "win-node-env",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/win-node-env/-/win-node-env-0.4.0.tgz",
  "_shasum": "2d9dc991702920c73eaa1d644655b773886da5cb",
  "_shrinkwrap": null,
  "_spec": "win-node-env",
  "_where": "C:\\Users\\Estacion\\Desktop\\Proyectos\\productDB",
  "bin": {
    "CHAI_JEST_SNAPSHOT_UPDATE_ALL": "bin/CHAI_JEST_SNAPSHOT_UPDATE_ALL.js",
    "DEBUG": "bin/DEBUG.js",
    "ENV": "bin/ENV.js",
    "NODE_ENV": "bin/NODE_ENV.js",
    "NODE_OPTIONS": "bin/NODE_OPTIONS.js",
    "PORT": "bin/PORT.js"
  },
  "bugs": {
    "url": "https://github.com/laggingreflex/win-node-env/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Set NODE_ENV variable before a command on Windows",
  "devDependencies": {
    "mocha": "^5.2.0"
  },
  "homepage": "https://github.com/laggingreflex/win-node-env#readme",
  "main": "index.js",
  "name": "win-node-env",
  "optionalDependencies": {},
  "os": [
    "win32"
  ],
  "readme": "# win-node-env\n\nRun npm scripts on Windows that set (common) environment variables.\n\n## Problem\n\nIf you're on Windows, you've probably encountered an error like:\n\n```batch\n'NODE_ENV' is not recognized as an internal or external command, operable program or batch file.\n```\n\nwhich comes from an npm script in your project set up like this:\n\n```json\n\"scripts\": {\n  \"build\": \"NODE_ENV=production babel src --out-dir dist\"\n}\n```\nSetting `NODE_ENV=production` before command `babel` doesn't work on Windows.\n\nYou might use [cross-env] but that involves changing your npm scripts and getting Mac/*nix users onboard.\n\n## Solution\n\n**win-node-env** creates executables like `NODE_ENV.cmd` that sets the `NODE_ENV` environment variable and runs the rest of the command.\n\n## Install\n\nYou may install it globally:\n\n```\nnpm install -g win-node-env\n```\n\nOr you may include it in your project's or your library's optional dependencies:\n\n```\nnpm install --save-optional win-node-env\n```\n\nIt won't install on any other OS than Windows.\n\n[package.json#os]: https://docs.npmjs.com/files/package.json#os\n\n## Usage\n\nJust install it and run your npm script commands, it should automatically make them work.\n\n```batch\nNODE_ENV=production cmd /c echo %NODE_ENV%\n```\n\nshould output:\n```batch\nproduction\n```\n\nApart from `NODE_ENV` there's a few more commonly used env vars:\n\n* `DEBUG`\n* `ENV`\n* `PORT`\n* `NODE_OPTIONS`\n\nYou can also use multiple env vars, as long as the **first one** is one of the above\n\n```batch\nNODE_ENV=production MY_VAR=something cmd /c echo %MY_VAR%\n```\n\n### Bonus\n\nIt now also supports `;` character!\n\n```sh\nENV=1 command; command\n```\n\nAlthough any `&&`, `||`, and `&` might break it.\n\n```sh\nENV=1 command && command ; command\n^^^^^^^^^^^^^    ^^^^^^^^^^^^^^^^^\nprocessed by     not processed by\nwin-node-env     win-node-env\n```\n\n### Tip: to add even more custom variables\n\nIf you'd like to add even more custom variable(s) (that you can specify as first) you can do so like this.\n\nSuppose you want to add `MY_VAR`, place a file named `MY_VAR.cmd` where it can be accessed by your command prompt. (when you enter a command in your command prompt, say `MY_VAR`, it looks for a file with the name `MY_VAR.cmd` in a list of pre-defined paths. This list of pre-defined paths resides in the environment variable `PATH`. [You can edit it][edit-env] to include the path containing your `MY_VAR.cmd` file)\n\n[edit-env]: https://www.google.com/search?q=edit+environment+variables+windows\n\nMake sure this module is installed globally.\n\nThen simply put the following code in this file:\n\n* **`MY_VAR.cmd`**\n\n  ```batch\n  @ECHO OFF\n  SET NODE_PATH=%APPDATA%\\npm\\node_modules\n  node -e \"require('win-node-env')('%~n0')\" X %*\n  ```\n\n  * [`NODE_PATH`](https://nodejs.org/api/cli.html#cli_node_path_path) tells `require` where to look for.\n\n  * `%APPDATA%\\npm\\node_modules` is generally where your globally installed modules live\n\n  * `%~n0` expands to the current file's name (without extension), i.e. `'MY_VAR'`\n\n  * `X` is a dummy argument that's just needed for some reason\n\n  * `%*` expands all the arguments passed to the batch file, and passes them on to this module\n\nYou can use the same contents of this file for any other variable names as well, i.e. just copy this file and change the filename.\n\n[cross-env]: https://www.npmjs.com/package/cross-env\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/laggingreflex/win-node-env.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "0.4.0"
}
