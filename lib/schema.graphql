type Product {
	_id: ID
	title: String
	tags: [String]
	image: String
	discount: String
	price: String
}

type User {
	_id: ID
	username: String
	password: String
	bag: [Product]
}

type Brand {
	_id: ID
	title: String
	products: [Product]
	image: String
}

union GlobalSearch = Product | Brand

type Query {
	#   "Devuelve todos los productos"
	getProducts: [Product]
	# "Devuelve un producto"
	getProduct(id: ID!): Product
	# "Devuelve las marcas"
	getBrands: [Brand]
	# "devuelve los usuarios"
	getUsers: User
	# "Ejecuta busqueda global"

	searchItems(keyword: String!): [GlobalSearch]
	# "Busca un producto"
	searchProducts(filter: String): [Product]
}

input productInput {
	title: String!
	tags: [String]
	discount: String!
	image: String!
	price: String!
}

input brandInput {
	title: String!
	image: String!
}

input userInput {
	username: String!
	password: String!
}

type Mutation {
	# Crea un producto
	createProduct(input: productInput!): Product
	# Crea un usuario
	createUser(input: userInput!): User
	# Agrega un producto a una marca
	addProduct(productID: ID!, brandID: ID!): Brand
	addProductToBag(productID: ID!, userID: ID!): User
	# Crea una marca
	createBrand(input: brandInput!): Brand
}
